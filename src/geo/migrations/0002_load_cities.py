# Generated by Django 5.2.3 on 2025-07-25 12:15

from django.db import migrations
from django.contrib.gis.geos import Point
from pathlib import Path
import csv
import typing as t


def load_cities_from_csv(apps: migrations.state.Apps, schema_editor: t.Any) -> None:
    from geo.conf import WORLDCITIES_CSV_PATH

    City = apps.get_model("geo", "City")

    path = Path(WORLDCITIES_CSV_PATH)
    if not path.exists():
        raise FileNotFoundError(f"City import failed: file does not exist at {WORLDCITIES_CSV_PATH}")

    with path.open("r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        rows: list[dict[str, str]] = list(reader)

    objs: list[t.Any] = []
    for row in rows:
        try:
            obj = City(
                name=row["city"],
                ascii_name=row["city_ascii"],
                country=row["country"],
                iso2=row["iso2"],
                iso3=row["iso3"],
                admin_name=row.get("admin_name") or None,
                capital=row.get("capital") or None,
                population=int(float(row["population"])) if row["population"] else None,
                city_id=int(row["id"]),
                location=Point(float(row["lng"]), float(row["lat"])),  # lon, lat
            )
            objs.append(obj)
        except Exception as e:
            raise ValueError(f"Failed to parse city row: {row}") from e

    BATCH_SIZE = 500
    for i in range(0, len(objs), BATCH_SIZE):
        City.objects.bulk_create(objs[i:i + BATCH_SIZE], ignore_conflicts=True, batch_size=BATCH_SIZE)


class Migration(migrations.Migration):

    dependencies = [
        ('geo', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_cities_from_csv, reverse_code=migrations.RunPython.noop),
    ]