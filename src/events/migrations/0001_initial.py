# Generated by Django 5.2.3 on 2025-08-10 20:34

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import events.models.event
import events.models.mixins
import events.models.organization
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geo', '0001_initial'),
        ('questionnaires', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('cover_art', models.ImageField(blank=True, null=True, upload_to='cover-art', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('description', models.TextField(blank=True, db_index=True, null=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('slug', models.SlugField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members-only', 'Members Only'), ('staff-only', 'Staff Only')], db_index=True, default='private', max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, geography=True, null=True, srid=4326)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('cover_art', models.ImageField(blank=True, null=True, upload_to='cover-art', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('draft', 'Draft'), ('deleted', 'Deleted')], default='draft', max_length=10)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('slug', models.SlugField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('invitation_message', models.TextField(blank=True, help_text='Invitation message to override the one automatically generated using name and description.', null=True)),
                ('event_type', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members-only', 'Members Only')], db_index=True, default='private', max_length=20)),
                ('max_attendees', models.PositiveIntegerField(default=0)),
                ('waitlist_open', models.BooleanField(default=False)),
                ('start', models.DateTimeField(db_index=True)),
                ('end', models.DateTimeField(db_index=True)),
                ('rsvp_before', models.DateTimeField(blank=True, db_index=True, help_text='RSVP deadline for events that do not require tickets', null=True)),
                ('check_in_starts_at', models.DateTimeField(blank=True, db_index=True, help_text='When check-in opens for this event', null=True)),
                ('check_in_ends_at', models.DateTimeField(blank=True, db_index=True, help_text='When check-in closes for this event', null=True)),
                ('free_for_members', models.BooleanField(default=False)),
                ('free_for_staff', models.BooleanField(default=True)),
                ('requires_ticket', models.BooleanField(default=True)),
                ('potluck_open', models.BooleanField(default=False)),
                ('attendee_count', models.PositiveIntegerField(default=0, editable=False)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geo.city')),
                ('event_series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='events.eventseries')),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='EventWaitList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='waitlist',
            field=models.ManyToManyField(blank=True, related_name='waitlist', through='events.EventWaitList', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='GeneralUserPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('silence_all_notifications', models.BooleanField(default=False)),
                ('show_me_on_attendee_list', models.CharField(choices=[('always', 'Always display'), ('never', 'Never display'), ('to_members', 'Visible to other organization members'), ('to_invitees', 'Visible to other invitees at the same event'), ('to_both', 'Visible to both')], db_index=True, default='never', max_length=20)),
                ('event_reminders', models.BooleanField(default=True, help_text='Receive event reminders (14, 7 and 1 days before events the user is attending).')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.city')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='general_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Default User Preferences',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members-only', 'Members Only'), ('staff-only', 'Staff Only')], db_index=True, default='private', max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, geography=True, null=True, srid=4326)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('cover_art', models.ImageField(blank=True, null=True, upload_to='cover-art', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp']), events.models.mixins.validate_image_file])),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('platform_fee_percent', models.DecimalField(decimal_places=2, default=Decimal('3.00'), help_text='The percentage platform fee Revel takes on ticket sales for this organization.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('platform_fee_fixed', models.DecimalField(decimal_places=2, default=Decimal('0.5'), help_text='The fixed platform fee for this organization.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stripe_account_id', models.CharField(blank=True, help_text='The Stripe Connect Account ID for this organization.', max_length=255, null=True, unique=True)),
                ('stripe_charges_enabled', models.BooleanField(default=False)),
                ('stripe_details_submitted', models.BooleanField(default=False)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geo.city')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='eventseries',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_series', to='events.organization'),
        ),
        migrations.AddField(
            model_name='event',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='events.organization'),
        ),
        migrations.CreateModel(
            name='AdditionalResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members-only', 'Members Only'), ('staff-only', 'Staff Only')], db_index=True, default='private', max_length=20)),
                ('resource_type', models.CharField(choices=[('file', 'File'), ('link', 'Link'), ('text', 'Text')], db_index=True, max_length=255)),
                ('display_on_organization_page', models.BooleanField(default=True, help_text='Whether the resource should be displayed on organization pages.')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='file')),
                ('link', models.URLField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('events', models.ManyToManyField(blank=True, related_name='additional_resources', to='events.event')),
                ('event_series', models.ManyToManyField(blank=True, related_name='additional_resources', to='events.eventseries')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_resources', to='events.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='events.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='member_organizations', through='events.OrganizationMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OrganizationMembershipRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('message', models.TextField(blank=True, db_index=True, null=True)),
                ('decided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_decided_by', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_requests', to='events.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationQuestionnaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('questionnaire_type', models.CharField(choices=[('admission', 'Admission'), ('membership', 'Membership'), ('feedback', 'Feedback'), ('generic', 'Generic')], db_index=True, default='admission', max_length=20)),
                ('max_submission_age', models.TimeField(blank=True, db_index=True, null=True)),
                ('event_series', models.ManyToManyField(blank=True, related_name='org_questionnaires', to='events.eventseries')),
                ('events', models.ManyToManyField(blank=True, related_name='org_questionnaires', to='events.event')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='org_questionnaires', to='events.organization')),
                ('questionnaire', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='org_questionnaires', to='questionnaires.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('accept_new_members', models.BooleanField(default=False)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_email_verified', models.BooleanField(default=False)),
                ('webform_override_url', models.URLField(blank=True, help_text='If provided, overrides the built-in form.', null=True)),
                ('membership_requests_methods', models.JSONField(blank=True, default=list, validators=[events.models.organization._validate_membership_request_methods])),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='events.organization')),
            ],
            options={
                'verbose_name_plural': 'organization settings',
            },
        ),
        migrations.CreateModel(
            name='OrganizationStaff',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('permissions', models.JSONField(blank=True, default=events.models.organization._get_default_permissions, validators=[events.models.organization._validate_permissions])),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_memberships', to='events.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_staff_memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='staff_members',
            field=models.ManyToManyField(blank=True, related_name='staff_organizations', through='events.OrganizationStaff', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OrganizationToken',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('id', models.CharField(default=events.models.mixins.secure_random_code, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uses', models.IntegerField(default=0)),
                ('max_uses', models.IntegerField(default=0, help_text='The maximum number of invites allowed for this token. 0 Means unlimited.')),
                ('grants_membership', models.BooleanField(default=True)),
                ('grants_staff_status', models.BooleanField(default=False)),
                ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_tokens', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='events.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PotluckItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('quantity', models.CharField(blank=True, max_length=20, null=True)),
                ('item_type', models.CharField(choices=[('food', 'Food'), ('main_course', 'Main Course'), ('side_dish', 'Side Dish'), ('dessert', 'Dessert'), ('drink', 'Drink'), ('alcohol', 'Alcohol'), ('non_alcoholic', 'Non-Alcoholic'), ('supplies', 'Supplies'), ('labor', 'Labor / Help'), ('entertainment', 'Entertainment'), ('sexual_health', 'Sexual Health'), ('toys', 'Toys'), ('care', 'Care'), ('transport', 'Transport / Shuttle'), ('misc', 'Miscellaneous')], db_index=True, max_length=20)),
                ('note', models.TextField(blank=True, null=True)),
                ('is_suggested', models.BooleanField(default=False, help_text='For host-created items awaiting volunteers')),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='potluck_items', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='potluck_items', to='events.event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('checked_in', 'Checked In'), ('cancelled', 'Cancelled')], db_index=True, default='active', max_length=20)),
                ('checked_in_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('checked_in_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checked_in_tickets', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('stripe_session_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('platform_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('raw_response', models.JSONField(blank=True, default=dict)),
                ('expires_at', models.DateTimeField(db_index=True, default=events.models.event._get_payment_default_expiry, editable=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='payment', to='events.ticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketTier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members-only', 'Members Only'), ('staff-only', 'Staff Only')], db_index=True, default='public', max_length=20)),
                ('payment_method', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('at_the_door', 'At The Door'), ('free', 'Free')], db_index=True, default='online', max_length=20)),
                ('purchasable_by', models.CharField(choices=[('public', 'General public'), ('members', 'Members only'), ('invited', 'Invitees only'), ('invited_and_members', 'Invited and Members only')], db_index=True, default='public', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('price_type', models.CharField(choices=[('fixed', 'Fixed Price'), ('pwyc', 'Pay What You Can')], db_index=True, default='fixed', help_text='Whether this tier has a fixed price or allows pay-what-you-can pricing', max_length=10)),
                ('pwyc_min', models.DecimalField(decimal_places=2, default=1, help_text='Minimum amount for pay-what-you-can pricing', max_digits=10, validators=[django.core.validators.MinValueValidator(1)])),
                ('pwyc_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum amount for pay-what-you-can pricing (optional)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('currency', models.CharField(default='EUR', help_text='ISO 4217 currency code', max_length=3)),
                ('sales_start_at', models.DateTimeField(blank=True, db_index=True, help_text='When ticket sales begin for this tier', null=True)),
                ('sales_end_at', models.DateTimeField(blank=True, db_index=True, help_text='When ticket sales end for this tier', null=True)),
                ('total_quantity', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('quantity_sold', models.PositiveIntegerField(default=0)),
                ('manual_payment_instructions', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_tiers', to='events.event')),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='tier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='events.tickettier'),
        ),
        migrations.CreateModel(
            name='PendingEventInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('waives_questionnaire', models.BooleanField(default=False)),
                ('waives_purchase', models.BooleanField(default=False)),
                ('overrides_max_attendees', models.BooleanField(default=False)),
                ('waives_membership_required', models.BooleanField(default=False)),
                ('waives_rsvp_deadline', models.BooleanField(default=False, help_text='Waives RSVP deadline check for this user')),
                ('custom_message', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(db_index=True, help_text='Email of the user to be invited', max_length=254)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_invitations', to='events.event')),
                ('tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.tickettier')),
            ],
        ),
        migrations.CreateModel(
            name='EventToken',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('id', models.CharField(default=events.models.mixins.secure_random_code, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uses', models.IntegerField(default=0)),
                ('max_uses', models.IntegerField(default=0, help_text='The maximum number of invites allowed for this token. 0 Means unlimited.')),
                ('grants_invitation', models.BooleanField(default=True)),
                ('invitation_payload', models.JSONField(blank=True, help_text='If provided, the token will we viable to claim invitations.', null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='events.event')),
                ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_tokens', to=settings.AUTH_USER_MODEL)),
                ('invitation_tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.tickettier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('waives_questionnaire', models.BooleanField(default=False)),
                ('waives_purchase', models.BooleanField(default=False)),
                ('overrides_max_attendees', models.BooleanField(default=False)),
                ('waives_membership_required', models.BooleanField(default=False)),
                ('waives_rsvp_deadline', models.BooleanField(default=False, help_text='Waives RSVP deadline check for this user')),
                ('custom_message', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to=settings.AUTH_USER_MODEL)),
                ('tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.tickettier')),
            ],
        ),
        migrations.CreateModel(
            name='UserEventPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('silence_all_notifications', models.BooleanField(default=False)),
                ('show_me_on_attendee_list', models.CharField(choices=[('always', 'Always display'), ('never', 'Never display'), ('to_members', 'Visible to other organization members'), ('to_invitees', 'Visible to other invitees at the same event'), ('to_both', 'Visible to both')], db_index=True, default='never', max_length=20)),
                ('event_reminders', models.BooleanField(default=True, help_text='Receive event reminders (14, 7 and 1 days before events the user is attending).')),
                ('is_subscribed', models.BooleanField(default=False)),
                ('notify_on_potluck_updates', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Event User Preferences',
            },
        ),
        migrations.CreateModel(
            name='UserEventSeriesPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('silence_all_notifications', models.BooleanField(default=False)),
                ('show_me_on_attendee_list', models.CharField(choices=[('always', 'Always display'), ('never', 'Never display'), ('to_members', 'Visible to other organization members'), ('to_invitees', 'Visible to other invitees at the same event'), ('to_both', 'Visible to both')], db_index=True, default='never', max_length=20)),
                ('event_reminders', models.BooleanField(default=True, help_text='Receive event reminders (14, 7 and 1 days before events the user is attending).')),
                ('is_subscribed', models.BooleanField(default=False)),
                ('notify_on_new_events', models.BooleanField(default=True)),
                ('event_series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='events.eventseries')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserOrganizationPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('silence_all_notifications', models.BooleanField(default=False)),
                ('show_me_on_attendee_list', models.CharField(choices=[('always', 'Always display'), ('never', 'Never display'), ('to_members', 'Visible to other organization members'), ('to_invitees', 'Visible to other invitees at the same event'), ('to_both', 'Visible to both')], db_index=True, default='never', max_length=20)),
                ('event_reminders', models.BooleanField(default=True, help_text='Receive event reminders (14, 7 and 1 days before events the user is attending).')),
                ('is_subscribed', models.BooleanField(default=False)),
                ('notify_on_new_events', models.BooleanField(default=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='events.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AttendeeVisibilityFlag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_visible', models.BooleanField(default=False)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visible_to', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visible_attendees', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'event'], name='events_atte_user_id_00d932_idx'), models.Index(fields=['event', 'target'], name='events_atte_event_i_6cdeb2_idx')],
                'constraints': [models.UniqueConstraint(fields=('user', 'event', 'target'), name='unique_attendee_visibility_constraint')],
            },
        ),
        migrations.CreateModel(
            name='EventInvitationRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('message', models.TextField(blank=True, db_index=True, null=True)),
                ('decided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_decided_by', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_requests', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(fields=('event', 'user'), name='unique_event_user_invitation_request')],
            },
        ),
        migrations.CreateModel(
            name='EventRSVP',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('maybe', 'Maybe')], db_index=True, default=None, max_length=20, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('event', 'user'), name='unique_event_user')],
            },
        ),
        migrations.AddConstraint(
            model_name='eventwaitlist',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='unique_event_waitlist'),
        ),
        migrations.AddConstraint(
            model_name='eventseries',
            constraint=models.UniqueConstraint(fields=('organization', 'name'), name='unique_event_series_name'),
        ),
        migrations.AddConstraint(
            model_name='eventseries',
            constraint=models.UniqueConstraint(fields=('organization', 'slug'), name='unique_event_series_slug'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['visibility', 'status'], name='idx_visibility_status'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organization', 'status'], name='idx_org_status'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organization', 'visibility'], name='idx_org_visibility'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'start'], name='idx_type_start'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status', 'start'], name='idx_status_start'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['visibility', 'organization'], name='idx_visibility_organization'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.UniqueConstraint(fields=('organization', 'name'), name='unique_organization_name'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.UniqueConstraint(fields=('organization', 'slug'), name='unique_organization_slug'),
        ),
        migrations.AddConstraint(
            model_name='organizationmembershiprequest',
            constraint=models.UniqueConstraint(fields=('organization', 'user'), name='unique_organization_user_membership_request'),
        ),
        migrations.AddConstraint(
            model_name='organizationquestionnaire',
            constraint=models.UniqueConstraint(fields=('organization', 'questionnaire'), name='unique_organizationquestionnaire'),
        ),
        migrations.AddConstraint(
            model_name='organizationstaff',
            constraint=models.UniqueConstraint(fields=('organization', 'user'), name='unique_organization_staff'),
        ),
        migrations.AddIndex(
            model_name='tickettier',
            index=models.Index(fields=['id', 'event', 'payment_method'], name='events_tick_id_0b8cd6_idx'),
        ),
        migrations.AddConstraint(
            model_name='tickettier',
            constraint=models.UniqueConstraint(fields=('event', 'name'), name='unique_event_name'),
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('event', 'user', 'tier'), name='unique_ticket_event_user_tier'),
        ),
        migrations.AddConstraint(
            model_name='pendingeventinvitation',
            constraint=models.UniqueConstraint(fields=('event', 'email'), name='unique_pending_event_invitation_event_email'),
        ),
        migrations.AddConstraint(
            model_name='eventinvitation',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='unique_event_invitation_event_user'),
        ),
        migrations.AddConstraint(
            model_name='usereventpreferences',
            constraint=models.UniqueConstraint(fields=('user', 'event'), name='unique_event_user_preferences'),
        ),
        migrations.AddConstraint(
            model_name='usereventseriespreferences',
            constraint=models.UniqueConstraint(fields=('user', 'event_series'), name='unique_event_series_user_preferences'),
        ),
        migrations.AddConstraint(
            model_name='userorganizationpreferences',
            constraint=models.UniqueConstraint(fields=('user', 'organization'), name='unique_organization_user_preferences'),
        ),
    ]
