# Generated by Django 5.2.3 on 2025-08-10 20:34

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('question', models.TextField()),
                ('positive_weight', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text='Points scored when answered correctly.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('negative_weight', models.DecimalField(decimal_places=2, default=Decimal('0.0'), help_text='Points deducted when answered incorrectly.', max_digits=5, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('is_fatal', models.BooleanField(default=False, help_text='A fatal question will fail the questionnaire.')),
                ('is_mandatory', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(db_index=True, default=0, help_text='The order the questions are displayed. Ignored if questionnaire.shuffle_questions is True.')),
                ('allow_multiple_answers', models.BooleanField(default=False)),
                ('shuffle_options', models.BooleanField(default=True, help_text='Shuffle the order the options are displayed each time.')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('min_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('llm_guidelines', models.TextField(blank=True, help_text='LLM guidelines to evaluate automatically text-based answers. Can be overridden ad question-level.', null=True)),
                ('llm_backend', models.CharField(choices=[('questionnaires.llms.MockEvaluator', 'Mock Evaluator'), ('questionnaires.llms.VulnerableChatGPTEvaluator', 'Vulnerable ChatGPTEvaluator'), ('questionnaires.llms.BetterChatGPTEvaluator', 'Better ChatGPTEvaluator')], default='questionnaires.llms.MockEvaluator', max_length=255)),
                ('shuffle_questions', models.BooleanField(default=False, help_text='Shuffle questions before answering.')),
                ('shuffle_sections', models.BooleanField(default=False, help_text='Shuffle sections before answering.')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('ready', 'Ready'), ('published', 'Published')], db_index=True, default='draft', max_length=10)),
                ('evaluation_mode', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual'), ('hybrid', 'Hybrid')], default='automatic', max_length=20)),
                ('can_retake_after', models.DurationField(blank=True, help_text='How long to wait to be able to retake.', null=True)),
                ('max_attempts', models.IntegerField(default=0, help_text='Max number of attempts to answer. 0 means unlimited.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MultipleChoiceOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('option', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(db_index=True, default=0, help_text='The order the options are displayed. Ignored if question.shuffle_options is True.')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='questionnaires.multiplechoicequestion')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='multiplechoicequestion',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='questionnaires.questionnaire'),
        ),
        migrations.CreateModel(
            name='QuestionnaireSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField(default=0)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='questionnaires.questionnaire')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='multiplechoicequestion',
            name='section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='questionnaires.questionnairesection'),
        ),
        migrations.CreateModel(
            name='FreeTextQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('question', models.TextField()),
                ('positive_weight', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text='Points scored when answered correctly.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('negative_weight', models.DecimalField(decimal_places=2, default=Decimal('0.0'), help_text='Points deducted when answered incorrectly.', max_digits=5, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('is_fatal', models.BooleanField(default=False, help_text='A fatal question will fail the questionnaire.')),
                ('is_mandatory', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(db_index=True, default=0, help_text='The order the questions are displayed. Ignored if questionnaire.shuffle_questions is True.')),
                ('llm_guidelines', models.TextField(blank=True, help_text='LLM guidelines to evaluate automatically text-based answers. If provided, adds to the questionnaire.llm_guidelines specifically for the question.', null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='questionnaires.questionnaire')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='questionnaires.questionnairesection')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('ready', 'Ready')], db_index=True, default='draft', help_text='The status of the submission.', max_length=10)),
                ('submitted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionnaire_submissions', to='questionnaires.questionnaire')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionnaire_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('raw_evaluation_data', models.JSONField(blank=True, null=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('rejected', 'Rejected'), ('pending review', 'Pending Review')], default='pending review', max_length=20)),
                ('proposed_status', models.CharField(blank=True, choices=[('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default=None, max_length=20, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('automatically_evaluated', models.BooleanField(default=False)),
                ('evaluator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation', to='questionnaires.questionnairesubmission')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='MultipleChoiceAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='questionnaires.multiplechoiceoption')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='questionnaires.multiplechoicequestion')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_answers', to='questionnaires.questionnairesubmission')),
            ],
        ),
        migrations.CreateModel(
            name='FreeTextAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('answer', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='questionnaires.freetextquestion')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_answers', to='questionnaires.questionnairesubmission')),
            ],
        ),
        migrations.AddConstraint(
            model_name='questionnairesubmission',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'draft')), fields=('user', 'questionnaire'), name='unique_draft_submission_per_user'),
        ),
        migrations.AddIndex(
            model_name='multiplechoiceanswer',
            index=models.Index(fields=['submission', 'question'], name='mca_user_question_idx'),
        ),
        migrations.AddConstraint(
            model_name='multiplechoiceanswer',
            constraint=models.UniqueConstraint(fields=('submission', 'question', 'option'), name='unique_user_question_option'),
        ),
        migrations.AddIndex(
            model_name='freetextanswer',
            index=models.Index(fields=['submission', 'question'], name='fta_user_question_idx'),
        ),
        migrations.AddConstraint(
            model_name='freetextanswer',
            constraint=models.UniqueConstraint(fields=('submission', 'question'), name='unique_user_freetext_answer'),
        ),
    ]
