# Generated by Django 5.2.3 on 2025-08-10 20:34

import django.db.models.deletion
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FileUploadAudit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('app', models.CharField(db_index=True, max_length=64)),
                ('model', models.CharField(db_index=True, max_length=64)),
                ('instance_pk', models.UUIDField(db_index=True)),
                ('field', models.CharField(db_index=True, max_length=64)),
                ('file_hash', models.CharField(db_index=True, max_length=64)),
                ('uploader', models.EmailField(db_index=True, max_length=254)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CLEAN', 'Clean'), ('MALICIOUS', 'Malicious')], db_index=True, default='PENDING', max_length=20)),
                ('notified', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Legal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('terms_and_conditions', models.TextField(blank=True, default='', help_text='Terms and Conditions text in markdown format')),
                ('privacy_policy', models.TextField(blank=True, default='', help_text='Privacy Policy text in markdown format')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Legal Documents',
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_user_joined', models.BooleanField(default=False, help_text='Send a notification when a new user joins the platform.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_retention_days', models.PositiveIntegerField(default=30, help_text='The number of days to retain data before deletion.', verbose_name='Data Retention Period')),
                ('live_emails', models.BooleanField(default=False, help_text='Live-emails enabled')),
                ('frontend_base_url', models.URLField(default='http://localhost:3000')),
                ('internal_catchall_email', models.EmailField(default='internal@example.com', help_text='The catchall email address for internal use.', max_length=254, verbose_name='Internal Catchall Email')),
            ],
            options={
                'verbose_name': 'Common Settings',
                'verbose_name_plural': 'Common Settings',
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('to', models.EmailField(db_index=True, max_length=254)),
                ('subject', models.TextField(db_index=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('test_only', models.BooleanField(db_index=True, default=False)),
                ('compressed_body', models.BinaryField(blank=True, null=True)),
                ('compressed_html', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['to', 'sent_at', 'test_only'], name='ix_emaillog_to_sentat_testonly')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalLegal',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('terms_and_conditions', models.TextField(blank=True, default='', help_text='Terms and Conditions text in markdown format')),
                ('privacy_policy', models.TextField(blank=True, default='', help_text='Privacy Policy text in markdown format')),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Legal Documents',
                'verbose_name_plural': 'historical Legal Documentss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSiteSettings',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('notify_user_joined', models.BooleanField(default=False, help_text='Send a notification when a new user joins the platform.')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('data_retention_days', models.PositiveIntegerField(default=30, help_text='The number of days to retain data before deletion.', verbose_name='Data Retention Period')),
                ('live_emails', models.BooleanField(default=False, help_text='Live-emails enabled')),
                ('frontend_base_url', models.URLField(default='http://localhost:3000')),
                ('internal_catchall_email', models.EmailField(default='internal@example.com', help_text='The catchall email address for internal use.', max_length=254, verbose_name='Internal Catchall Email')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Common Settings',
                'verbose_name_plural': 'historical Common Settings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='QuarantinedFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('file', models.FileField(upload_to='quarantined_files')),
                ('findings', models.JSONField()),
                ('audit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='common.fileuploadaudit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(blank=True, help_text='Hex color (e.g. #FF0099)', max_length=7, null=True)),
                ('icon', models.CharField(blank=True, help_text='Optional icon name', max_length=64, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='common.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('object_id', models.UUIDField()),
                ('assigned_by', models.UUIDField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='common.tag')),
            ],
            options={
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='common_taga_content_b62858_idx')],
                'unique_together': {('tag', 'content_type', 'object_id')},
            },
        ),
    ]
